import { AUTOGENERATED_COMMENT } from "../../consts.ts";

type EnvVar = {
    key: string;
    description?: string;
}

export function createEnvVarInjection(envVars: EnvVar[]): string {
    return `/* ${AUTOGENERATED_COMMENT} */
declare global {
    namespace Deno {
        interface Env {
            // Add specific overloads for our environment variables
            ${envVars.map(({ key, description }) => `/** ${description} */\nget(key: "${key}"): string;`).join("\n            ")}
            // Keep the existing fallback
            get(key: string): string | undefined;
        }

        // @ts-ignore: Var not allowed (but hoisting needed)
        var env: Env; // hoisting :(
    }

    namespace NodeJS {
        interface ProcessEnv {
            ${envVars.map(({ key, description }) => `/** ${description} */\n${key}: string;`).join("\n            ")}
            [key: string]: string | undefined;
        }
    }

    // @ts-ignore: Unused 'process' declaration. Also, var not allowed (but hoisting needed)
    var process: { 
        env: NodeJS.ProcessEnv;
        pid: number;
        argv: string[];
        exit: (code?: number) => never;
    };
}

export {}`;
}
